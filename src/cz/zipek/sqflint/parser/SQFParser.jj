options {
	IGNORE_CASE = true;
	ERROR_REPORTING = true;
	DEBUG_PARSER = false;
	STATIC = false;
}

PARSER_BEGIN(SQFParser)

package cz.zipek.sqflint.parser;

import cz.zipek.sqflint.sqf.*;

public class SQFParser {
	public void setTabSize(int size) {
		jj_input_stream.setTabSize(size);
	}

	protected void handleName() throws ParseException {}
	protected void handleParams(SQFArray contents) throws ParseException {}

	protected int recover(ParseException ex, int target) throws ParseException {
		return recover(ex, target, false);
	}

	protected int recover(ParseException ex, int target, boolean skip) throws ParseException {
		return target;
	}
}

PARSER_END(SQFParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
| "#" : PREPROCESSOR_OUTPUT
}

<PREPROCESSOR_OUTPUT> SKIP:
{
     "\n" : DEFAULT
}

<PREPROCESSOR_OUTPUT> MORE:
{
	"\\\n" |
	"\\\r\n" |
	< ~[] >
}


/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* OPERATORS */

TOKEN :
{
	< ASSIGN: "=" >    |
	< GT: ">" >        |
	< LT: "<" >        |
	< GTEQ: ">=" > |
	< LTEQ: "<=" > |
	< BANG: "!" >      |
	< BANG2: "not " >  |
	< EQ: "==" >       |
	< SC_OR: "||" >    |
	< SC_AND: "&&" >   |
	< PLUS: "+" >      |
	< MINUS: "-" >     |
	< STAR: "*" >      |
	< SLASH: "/" >     |
	< POWER: "^" >     |
	< REM: "%" >       |
	< REM2: "mod" > |
	< CSEL: ">>" >
}

/* SQF Operators */

/* RESERVED */

TOKEN :
{
	< CASE: "case" > |
	< _DEFAULT: "default" > |
	< DO: "do" > |
	< FOR: "for" > |
	< FROM: "from" > |
	< TO: "to" > |
	< STEP: "step" > |
	< GOTO: "goto" > |
	< SWITCH: "switch" > |
	< WHILE: "while" > |
	< TRUE: "true" > |
	< FALSE: "false" > |
	< TRY: "try" > |
	< CATCH: "catch" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL>
      | <OCTAL_LITERAL>
  > |
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* > |
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ > |
  < #OCTAL_LITERAL: "0" (["0"-"7"])* > |
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)? 
      | (["0"-"9"])+ <EXPONENT>
      | (["0"-"9"])+ (<EXPONENT>)?
  > |
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ > |
  < STRING_LITERAL:
      "\""
      ( "\"\"" | (~["\""]) )*
      "\""
  > |
  < STRING_LITERAL_OTHER:
      "'"
      ( "\"" | (~["\'","\\","\""]) )*
      "'"
  >
}

/* IDENTIFIERS */

TOKEN :
{
	< IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* > |
	<#LETTER: ["A"-"Z","_","a"-"z"]> |
	<#DIGIT: ["0"-"9"]>
}

/* SEPARATORS */

TOKEN :
{
	< LPAREN: "(" >    |
	< RPAREN: ")" >    |
	< LBRACE: "{" >    |
	< RBRACE: "}" >    |
	< LBRACKET: "[" >  |
	< RBRACKET: "]" >  |
	< COMMA: "," >     |
	< DOT: "." > |
	< SEMICOLON: ";" >
}


/*

============ END OF TOKENS =============
============ START OF LANG =============

*/


SQFBlock CompilationUnit() :
{
	SQFBlock result = new SQFBlock();
}
{
	try {
		result = BlockContents()
		<EOF> |
		<EOF>
	} catch (ParseException ex) {
		if (recover(ex, SEMICOLON, true) != EOF) {
			result = CompilationUnit();
		}
	} finally {
		return result;
	}
}


SQFLiteral Literal() :
{
	Token contents = null;
}
{
	contents = <INTEGER_LITERAL> { return new SQFLiteral(contents); } |
	contents = <FLOATING_POINT_LITERAL> { return new SQFLiteral(contents); } |
	contents = <STRING_LITERAL> { return new SQFString(contents); } |
	contents = <STRING_LITERAL_OTHER> { return new SQFString(contents); } |
	contents = BooleanLiteral() { return new SQFLiteral(contents); }/* |
	contents = "throw" { return new SQFLiteral(contents); }*/
}

Token BooleanLiteral() :
{
	Token result = null;
}
{
	result = "true" { return result; }  |
	result = "false" { return result; }
}

Token Operator() :
{ Token result = null; }
{
	result = ">>" { return result; } |
	result = "=" { return result; } |
	result = "==" { return result; } |
	result = "!=" { return result; } |
	result = ">" { return result; } |
	result = "<" { return result; } |
	result = "+" { return result; } |
	result = "-" { return result; } |
	result = "*" { return result; } |
	result = "%" { return result; } |
	result = "&&" { return result; } |
	result = "||" { return result; } |
	result = "mod" { return result; } |
	result = "^" { return result; } |
	result = ">=" { return result; } |
	result = "<=" { return result; } |
	result = "/" { return result; }
}

SQFIdentifier Name() :
{
	Token token = null;

	handleName();
}
{
	token = <IDENTIFIER>

	{ return new SQFIdentifier(token); }
}

SQFExpression Expression(SQFExpression left) :
{
	SQFExpression result = new SQFExpression(getToken(0));
	SQFUnit main = null;
	SQFExpression right = null;
	Token opLit = null;

	result.setLeft(left);
}
{
	(opLit = "!" | opLit = "not " | opLit = Operator()) right = Expression(result) { return result.setMain(new SQFOperator(opLit)).setRight(right); } |
	main = PrimaryExpression(left) [ right = Expression(result) ] { return result.setMain(main).setRight(right); }
}

SQFUnit PrimaryExpression(SQFExpression left) :
{
	SQFUnit result = null;
}
{
	result = Literal() { return result; }  |
	"(" result = Expression(null) ")" { return result; } |
	result = Name() { return result; } |
	result = Block() { return result; } |
	result = Array() { return result; }
}

SQFArray Array() :
{
	SQFArray array = new SQFArray();
	SQFExpression item = null;
}
{
	LOOKAHEAD(2) "[" item = Expression(null) { array.add(item); } ( "," item = Expression(null) { array.add(item); } )* "]" { return array; } |
	"[" "]" 	{ return array; }
}

SQFBlock Block() :
{
	SQFBlock result = new SQFBlock();
}
{
	LOOKAHEAD(2)
	"{" result = BlockContents() "}" { return result; } |
	"{" "}" { return result; }
}

SQFBlock BlockContents():
{
	SQFBlock result = new SQFBlock();
	SQFUnit statement = null;
}
{
	statement = Statement() { result.add(statement); }
	( ";" [ statement = Statement() { result.add(statement); }  ] )*
	{ return result; }
}

SQFUnit Statement() :
{
	SQFUnit result = null;
}
{
	try {
		LOOKAHEAD(3)
		result = SwitchStatement() { return result; } |
		result = WhileStatement() { return result; } |
		result = ForStatement() { return result; } |
		result = TryStatement() { return result; } |
		result = Expression(null) { return result; }
	} catch(ParseException ex) {
		recover(ex, SEMICOLON);
	} finally {
		return result;
	}
}

SQFTryStatement TryStatement() :
{
	SQFBlock tryBlock = null;
	SQFBlock catchBlock = null;
}
{
	"try" tryBlock = Block() "catch" catchBlock = Block()
	{ return new SQFTryStatement(tryBlock, catchBlock); }
}

SQFSwitchStatement SwitchStatement() :
{
	SQFSwitchStatement result = new SQFSwitchStatement();
	SQFExpression exp = null;
	SQFCaseStatement cs = null;
	SQFBlock def = null;
}
{
	"switch" exp = Expression(null) { result.setExpression(exp); } "do" "{"
		( cs = SwitchCase() { result.add(cs); } )*
		[ def = SwitchDefault() { result.setDefault(def); } ]
	"}" { return result; }
}

SQFCaseStatement SwitchCase() :
{
	SQFExpression exp = null;
	SQFBlock block = null;
}
{
	exp = SwitchLabel() ( ( ":" block = Block() ";" ) | ";" )
	{ return new SQFCaseStatement(exp, block); }
}

SQFBlock SwitchDefault() :
{ SQFBlock result = null; }
{
	"default" result = Block() ";" { return result; }
}

SQFExpression SwitchLabel() :
{ SQFExpression result = null; }
{
	"case" result = Expression(null) { return result; }
}

SQFWhileStatement WhileStatement() :
{
	SQFBlock cond = null;
	SQFBlock block = null;
}
{
	"while" cond = Block() "do" block = Block()
	{ return new SQFWhileStatement(cond, block); }
}

SQFForStatement ForStatement() :
{
	SQFBlock init = null, cond = null, stepBlock = null, block = null;
	SQFExpression variable = null, from = null, to = null, step = null;
}
{
	LOOKAHEAD(2) ( "for" "[" init = Block() "," cond = Block() "," stepBlock = Block() "]" "do" block = Block() ) {
		return new SQFForArrayStatement(init, cond, stepBlock, block);
	} |
	LOOKAHEAD(2) ( "for" variable = Expression(null) "from" from = Expression(null) "to" to = Expression(null) [ "step" step = Expression(null) ] "do" block = Block() ) {
		return new SQFForExpressionStatement(variable, from, to, step, block);
	}
}